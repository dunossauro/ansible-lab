{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Laborat\u00f3rio para Live de Python sobre Ansible O objetivo desse reposit\u00f3rio \u00e9 ajudar voc\u00ea a construir um laborat\u00f3rio para aprender Ansible. Aqui voc\u00ea vai encontrar dicas e passos para configurar suas m\u00e1quinas virtuais para construir seu ambiente. A minha ideia principal com essa live \u00e9 n\u00e3o depender de nenhum servi\u00e7o de nuvem. Nem todas as pessoas podem pagar ou tem cart\u00e3o de cr\u00e9dito para poder inserir mesmo nos planos gratuitos. Para n\u00e3o depender de servi\u00e7os externos, vamos usar m\u00e1quinas virtuais com virtualbox e vamos configur\u00e1-las usando Vagrant . Sum\u00e1rio 01 - Configura\u00e7\u00e3o do ambiente 02 - O b\u00e1sico necess\u00e1rio sobre Vagrant 03 - Configura\u00e7\u00e3o do ansible 04 - Ansible b\u00e1sico","title":"Laborat\u00f3rio para Live de Python sobre Ansible :snake:"},{"location":"#laboratorio-para-live-de-python-sobre-ansible","text":"O objetivo desse reposit\u00f3rio \u00e9 ajudar voc\u00ea a construir um laborat\u00f3rio para aprender Ansible. Aqui voc\u00ea vai encontrar dicas e passos para configurar suas m\u00e1quinas virtuais para construir seu ambiente. A minha ideia principal com essa live \u00e9 n\u00e3o depender de nenhum servi\u00e7o de nuvem. Nem todas as pessoas podem pagar ou tem cart\u00e3o de cr\u00e9dito para poder inserir mesmo nos planos gratuitos. Para n\u00e3o depender de servi\u00e7os externos, vamos usar m\u00e1quinas virtuais com virtualbox e vamos configur\u00e1-las usando Vagrant .","title":"Laborat\u00f3rio para Live de Python sobre Ansible"},{"location":"#sumario","text":"01 - Configura\u00e7\u00e3o do ambiente 02 - O b\u00e1sico necess\u00e1rio sobre Vagrant 03 - Configura\u00e7\u00e3o do ansible 04 - Ansible b\u00e1sico","title":"Sum\u00e1rio"},{"location":"01_configuracao_do_ambiente/","text":"Configura\u00e7\u00e3o do ambiente A primeira coisa que precisamos fazer \u00e9 configurar o nosso host para instala\u00e7\u00e3o das m\u00e1quinas virtuais. Para isso, precisamos instalar o virtualbox e o vagrant . Instala\u00e7\u00e3o do virtualbox Virtualbox \u00e9 um software para cria\u00e7\u00e3o de m\u00e1quinas virtuais. E ele pode ser instalado em qualquer plataforma comum do mercado. Como Windows, Linux e MacOS. Caso voc\u00ea use o windows, as instala\u00e7\u00f5es podem ser feitas via chocolatey Voc\u00ea pode fazer o download e instalar ou instalar usando o seu gerenciador de pacotes usando seu terminal preferido: paru -S virtualbox # Arch choco install virtualbox # Windows sudo apt-get install virtualbox # Ubuntu Instala\u00e7\u00e3o do vagrant Vagrant \u00e9 um software de c\u00f3digo aberto, escrito em Ruby para construir ambientes de desenvolvimento usando um arquivo de configura\u00e7\u00e3o. Que pode ser reproduzido por qualquer pessoa que tenha acesso ao arquivo. Abra seu terminal preferido e fa\u00e7a a instala\u00e7\u00e3o: paru -S vagrant # Arch choco install vagrant # Windows sudo apt install vagrant # Ubuntu","title":"Configura\u00e7\u00e3o do ambiente"},{"location":"01_configuracao_do_ambiente/#configuracao-do-ambiente","text":"A primeira coisa que precisamos fazer \u00e9 configurar o nosso host para instala\u00e7\u00e3o das m\u00e1quinas virtuais. Para isso, precisamos instalar o virtualbox e o vagrant .","title":"Configura\u00e7\u00e3o do ambiente"},{"location":"01_configuracao_do_ambiente/#instalacao-do-virtualbox","text":"Virtualbox \u00e9 um software para cria\u00e7\u00e3o de m\u00e1quinas virtuais. E ele pode ser instalado em qualquer plataforma comum do mercado. Como Windows, Linux e MacOS. Caso voc\u00ea use o windows, as instala\u00e7\u00f5es podem ser feitas via chocolatey Voc\u00ea pode fazer o download e instalar ou instalar usando o seu gerenciador de pacotes usando seu terminal preferido: paru -S virtualbox # Arch choco install virtualbox # Windows sudo apt-get install virtualbox # Ubuntu","title":"Instala\u00e7\u00e3o do virtualbox"},{"location":"01_configuracao_do_ambiente/#instalacao-do-vagrant","text":"Vagrant \u00e9 um software de c\u00f3digo aberto, escrito em Ruby para construir ambientes de desenvolvimento usando um arquivo de configura\u00e7\u00e3o. Que pode ser reproduzido por qualquer pessoa que tenha acesso ao arquivo. Abra seu terminal preferido e fa\u00e7a a instala\u00e7\u00e3o: paru -S vagrant # Arch choco install vagrant # Windows sudo apt install vagrant # Ubuntu","title":"Instala\u00e7\u00e3o do vagrant"},{"location":"02_o_basico_necessario_sobre_vagrant/","text":"B\u00e1sico necess\u00e1rio sobre Vagrant Vagrant \u00e9 uma ferramenta para provisionamento de m\u00e1quinas virtuais. Dizendo de forma simples, ele cria e configura m\u00e1quinas virtuais usando um arquivo de configura\u00e7\u00e3o chamado Vagrantfile . Nesse arquivo podemos descrever como nossas vms ser\u00e3o configuradas. Exemplo de um arquivo do Vagrant: Vagrantfile 1 2 3 Vagrant . configure ( \"2\" ) do | config | config . vm . box = \"archlinux/archlinux\" end A linha destacada \u00e9 referente a um box do Vagrant. Vagrant boxes Um box do vagrant no nosso contexto \u00e9 uma m\u00e1quina virtual pr\u00e9-fabricada por uma pessoa. Existem milhares delas e elas podem ser acessadas no Vagrant Cloud Eu optei por usar m\u00e1quina do arch linux para iniciarmos nossa configura\u00e7\u00e3o. Criando uma m\u00e1quina virtual Nosso primeiro passado \u00e9 copiar o seguinte Vagrantfile : Vagrantfile 1 2 3 Vagrant . configure ( \"2\" ) do | config | config . vm . box = \"archlinux/archlinux\" end e colocar no diret\u00f3rio do nosso projeto. Que vamos inicialmente chamar de ansible-lab . Dessa forma podemos criar nossa m\u00e1quina virtual usando um simples comando: $ Execu\u00e7\u00e3o no terminal vagrant up O resultado deve ser algo parecido com isso: Bringing machine 'default' up with 'virtualbox' provider... == > default: Importing base box 'archlinux/archlinux' ... == > default: Matching MAC address for NAT networking... == > default: Checking if box 'archlinux/archlinux' version '20221101.99038' is up to date... == > default: Setting the name of the VM: ansible_lab_default_1668393945684_70462 == > default: Clearing any previously set network interfaces... == > default: Preparing network interfaces based on configuration... default: Adapter 1 : nat == > default: Forwarding ports... default: 22 ( guest ) = > 2222 ( host ) ( adapter 1 ) == > default: Booting VM... == > default: Waiting for machine to boot. This may take a few minutes... default: SSH address: 127 .0.0.1:2222 default: SSH username: vagrant default: SSH auth method: private key default: Warning: Connection reset. Retrying... default: Warning: Remote connection disconnect. Retrying... default: default: Vagrant insecure key detected. Vagrant will automatically replace default: this with a newly generated keypair for better security. default: default: Inserting generated public key within guest... default: Removing insecure key from the guest if it ' s present... default: Key inserted! Disconnecting and reconnecting using new SSH key... == > default: Machine booted and ready! == > default: Checking for guest additions in VM... == > default: Mounting shared folders... default: /vagrant = > /home/z4r4tu5tr4/ansible_lab E ele criar\u00e1 uma m\u00e1quina virtual com archlinux no nosso virtualbox. OBS: Esse comando pode demorar um pouco pois ele vai baixar um hd virtual do archlinux e instalar no seu virtualbox. Agora que temos uma m\u00e1quina virtual podemos partir para o segundo passo. Que \u00e9 criar dois n\u00f3s para trabalhar com ansible. Destruindo a m\u00e1quina criada Caso voc\u00ea tenha problemas ou queira simplesmente destruir a m\u00e1quina virutal. O vagrant pode destruir de forma simples a vm e \u00e9 isso que faremos agora. vagrant destroy Com isso podemos ter nosso ambiente limpo outra vez: Configurando mais de uma m\u00e1quina virtual Agora que entendemos a din\u00e2mica de cria\u00e7\u00e3o de vms do vagrant, podemos configurar duas m\u00e1quinas para o ansible. Uma que vamos chamar de main que ser\u00e1 de onde chamaremos o ansible e uma que ser\u00e1 controlada por ele. Que se chamar\u00e1 somente arch . Para isso, s\u00f3 precisamos alterar nosso Vagrantfile : Vagrant . configure ( \"2\" ) do | config | config . vm . define \"main\" do | main | main . vm . box = \"archlinux/archlinux\" end config . vm . define \"arch\" do | arch | arch . vm . box = \"archlinux/archlinux\" end end Agora temos duas m\u00e1quinas virtuais. Ambas configuradas com archlinux. Por\u00e9m cada uma tem uma fun\u00e7\u00e3o diferente na nossa rede. O vagrant pode subir uma \u00fanica vm ou as duas de uma vez: vagrant up # Inicia as duas vms vagrant up arch # Somente a m\u00e1quina arch vagrant up main # Somente a m\u00e1quina main (vamos escolher essa op\u00e7\u00e3o)","title":"B\u00e1sico necess\u00e1rio sobre Vagrant"},{"location":"02_o_basico_necessario_sobre_vagrant/#basico-necessario-sobre-vagrant","text":"Vagrant \u00e9 uma ferramenta para provisionamento de m\u00e1quinas virtuais. Dizendo de forma simples, ele cria e configura m\u00e1quinas virtuais usando um arquivo de configura\u00e7\u00e3o chamado Vagrantfile . Nesse arquivo podemos descrever como nossas vms ser\u00e3o configuradas. Exemplo de um arquivo do Vagrant: Vagrantfile 1 2 3 Vagrant . configure ( \"2\" ) do | config | config . vm . box = \"archlinux/archlinux\" end A linha destacada \u00e9 referente a um box do Vagrant.","title":"B\u00e1sico necess\u00e1rio sobre Vagrant"},{"location":"02_o_basico_necessario_sobre_vagrant/#vagrant-boxes","text":"Um box do vagrant no nosso contexto \u00e9 uma m\u00e1quina virtual pr\u00e9-fabricada por uma pessoa. Existem milhares delas e elas podem ser acessadas no Vagrant Cloud Eu optei por usar m\u00e1quina do arch linux para iniciarmos nossa configura\u00e7\u00e3o.","title":"Vagrant boxes"},{"location":"02_o_basico_necessario_sobre_vagrant/#criando-uma-maquina-virtual","text":"Nosso primeiro passado \u00e9 copiar o seguinte Vagrantfile : Vagrantfile 1 2 3 Vagrant . configure ( \"2\" ) do | config | config . vm . box = \"archlinux/archlinux\" end e colocar no diret\u00f3rio do nosso projeto. Que vamos inicialmente chamar de ansible-lab . Dessa forma podemos criar nossa m\u00e1quina virtual usando um simples comando: $ Execu\u00e7\u00e3o no terminal vagrant up O resultado deve ser algo parecido com isso: Bringing machine 'default' up with 'virtualbox' provider... == > default: Importing base box 'archlinux/archlinux' ... == > default: Matching MAC address for NAT networking... == > default: Checking if box 'archlinux/archlinux' version '20221101.99038' is up to date... == > default: Setting the name of the VM: ansible_lab_default_1668393945684_70462 == > default: Clearing any previously set network interfaces... == > default: Preparing network interfaces based on configuration... default: Adapter 1 : nat == > default: Forwarding ports... default: 22 ( guest ) = > 2222 ( host ) ( adapter 1 ) == > default: Booting VM... == > default: Waiting for machine to boot. This may take a few minutes... default: SSH address: 127 .0.0.1:2222 default: SSH username: vagrant default: SSH auth method: private key default: Warning: Connection reset. Retrying... default: Warning: Remote connection disconnect. Retrying... default: default: Vagrant insecure key detected. Vagrant will automatically replace default: this with a newly generated keypair for better security. default: default: Inserting generated public key within guest... default: Removing insecure key from the guest if it ' s present... default: Key inserted! Disconnecting and reconnecting using new SSH key... == > default: Machine booted and ready! == > default: Checking for guest additions in VM... == > default: Mounting shared folders... default: /vagrant = > /home/z4r4tu5tr4/ansible_lab E ele criar\u00e1 uma m\u00e1quina virtual com archlinux no nosso virtualbox. OBS: Esse comando pode demorar um pouco pois ele vai baixar um hd virtual do archlinux e instalar no seu virtualbox. Agora que temos uma m\u00e1quina virtual podemos partir para o segundo passo. Que \u00e9 criar dois n\u00f3s para trabalhar com ansible.","title":"Criando uma m\u00e1quina virtual"},{"location":"02_o_basico_necessario_sobre_vagrant/#destruindo-a-maquina-criada","text":"Caso voc\u00ea tenha problemas ou queira simplesmente destruir a m\u00e1quina virutal. O vagrant pode destruir de forma simples a vm e \u00e9 isso que faremos agora. vagrant destroy Com isso podemos ter nosso ambiente limpo outra vez:","title":"Destruindo a m\u00e1quina criada"},{"location":"02_o_basico_necessario_sobre_vagrant/#configurando-mais-de-uma-maquina-virtual","text":"Agora que entendemos a din\u00e2mica de cria\u00e7\u00e3o de vms do vagrant, podemos configurar duas m\u00e1quinas para o ansible. Uma que vamos chamar de main que ser\u00e1 de onde chamaremos o ansible e uma que ser\u00e1 controlada por ele. Que se chamar\u00e1 somente arch . Para isso, s\u00f3 precisamos alterar nosso Vagrantfile : Vagrant . configure ( \"2\" ) do | config | config . vm . define \"main\" do | main | main . vm . box = \"archlinux/archlinux\" end config . vm . define \"arch\" do | arch | arch . vm . box = \"archlinux/archlinux\" end end Agora temos duas m\u00e1quinas virtuais. Ambas configuradas com archlinux. Por\u00e9m cada uma tem uma fun\u00e7\u00e3o diferente na nossa rede. O vagrant pode subir uma \u00fanica vm ou as duas de uma vez: vagrant up # Inicia as duas vms vagrant up arch # Somente a m\u00e1quina arch vagrant up main # Somente a m\u00e1quina main (vamos escolher essa op\u00e7\u00e3o)","title":"Configurando mais de uma m\u00e1quina virtual"},{"location":"03_configuracao_do_ansible/","text":"Configura\u00e7\u00e3o do ansible Instala\u00e7\u00e3o do ansible Agora que temos duas m\u00e1quinas virtuais criadas. Podemos come\u00e7ar a instala\u00e7\u00e3o do ansible. A primeira coisa que devemos fazer \u00e9 acessar a m\u00e1quina controladora. Para isso podemos usar o vagrant para nos ajudar: vagrant up main # Iniciar a m\u00e1quina controladora vagrant ssh main # Acessar o console da m\u00e1quina controladora via ssh E isso deve retornar o console d\u00e1 maquina controladora no usu\u00e1rio vagrant : O ansible tem seus pacotes nos reposit\u00f3rios de quase todas as distribui\u00e7\u00f5es linux. Ent\u00e3o voc\u00ea pode instalar no seu sistema como quiser. Caso tenha d\u00favidas, o link da documenta\u00e7\u00e3o Formas de instalar em diversos sistemas. sudo pacman -S ansible # Arch sudo apt install ansible # Ubuntu sudo dnf ansible # Familia Redhat O ansible tamb\u00e9m pode ser instalado via pip , por\u00e9m a instala\u00e7\u00e3o \u00e9 bastante trabalhosa. Como eu escolhi que a m\u00e1quina main fosse um archlinux, vamos seguir a configura\u00e7\u00e3o com ele. O primeiro passo que devemos fazer \u00e9 atualizar a m\u00e1quina para garantir que tudo funcione como o esperado: sudo pacman -Syu # Atualiza o sistema Caso a senha senha perguntada. A senha padr\u00e3o criada pelas m\u00e1quinas virtuais do vagrant \u00e9 vagrant . Agora podemos rodar o comando para instalar o ansible: sudo pacman -S ansible Se tudo ocorrer como o esperado, podemos perguntar a vers\u00e3o do ansible ao sistema: [ vagrant@archlinux ~ ] $ ansible --version ansible [ core 2 .14.0 ] config file = /etc/ansible/ansible.cfg configured module search path = [ '/home/vagrant/.ansible/plugins/modules' , '/usr/share/ansible/plugins/modules' ] ansible python module location = /usr/lib/python3.10/site-packages/ansible ansible collection location = /home/vagrant/.ansible/collections:/usr/share/ansible/collections executable location = /usr/bin/ansible python version = 3 .10.8 ( main, Nov 1 2022 , 14 :18:21 ) [ GCC 12 .2.0 ] ( /usr/bin/python ) jinja version = 3 .1.2 libyaml = True Ele nos disse que est\u00e1 na vers\u00e3o 3.10.8 Instala\u00e7\u00e3o de um editor de textos Recomendo fortemente que instale um editor de textos. Para facilitar a manuten\u00e7\u00e3o do sistema. Voc\u00ea pode usar o que quiser, por\u00e9m, usarei o nano nesse tutorial. E para come\u00e7armos com p\u00e9 direito no ansible, vamos fazer essa instala\u00e7\u00e3o usando-o e j\u00e1 partirmos para o nosso primeiro comando: ansible localhost -a \"sudo pacman -S nano --noconfirm\" E iremos receber esse resultado: [ WARNING ] : No inventory was parsed, only implicit localhost is available localhost | CHANGED | rc = 0 >> resolving dependencies... looking for conflicting packages... Packages ( 1 ) nano-6.4-1 Total Installed Size: 2 .49 MiB :: Proceed with installation? [ Y/n ] checking keyring... checking package integrity... loading package files... checking for file conflicts... checking available disk space... :: Processing package changes... installing nano... :: Running post-transaction hooks... ( 1 /1 ) Arming ConditionNeedsUpdate... O que significa que conseguimos fazer uma instala\u00e7\u00e3o na m\u00e1quina local usando ansible. Isso \u00e9 de mais. Entendendo esse comando Precisamos entender o b\u00e1sico do comando que executamos com ansible agora: ansible localhost -a \"sudo pacman -S nano --noconfirm\" Podemos dividi-lo em quatro partes: ansible: chama o ansible localhost: diz que a a\u00e7\u00e3o ser\u00e1 executada no localhost -a: Argumentos que passaremos para o comando \"sudo pacman -S nano --noconfirm\": Os argumentos do comando Quando s\u00f3 dizemos o nome do host localhost e colocamos os argumentos -a significa que ansible executar\u00e1 os argumentos como um comando de shell. Nesse caso \"sudo pacman -S nano --noconfirm\" \u00e9 um comando de shell que serve para instalar o nano . Arquivo de invent\u00e1rio Por padr\u00e3o o arquivo de invent\u00e1rio das m\u00e1quinas ficam no /etc/ansible/hosts . Vamos criar esse arquivo agora. sudo nano /etc/ansible/hosts \u00c9 nesse arquivo que colocamos os endere\u00e7os dos n\u00f3s que ser\u00e3o controlados pelo ansible. O arquivo tem o seguinte formato: [<nome_do_grupo>] <endere\u00e7o_da_maquina> <op\u00e7\u00f5es> Por exemplo, vamos cadastrar nossa outra vm arch que ser\u00e1 controlado pelo main . Para isso, precisamos iniciar essa m\u00e1quina virtual. Antes disso, temos que sair do ssh em main : exit logout Agora voltamos a maquina principal. A m\u00e1quina onde as m\u00e1quinas virtuais foram instaladas. Para super o arch : vagrant up arch Com isso, agora devemos ter duas m\u00e1quinas no nosso virtual box: Com nossa vm j\u00e1 de p\u00e9, podemos enviar um comando para o vagrant nos dizer o endere\u00e7o ip da m\u00e1quina arch : vagrant ssh arch -c \"ip addr\" 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08 :00:27:fa:60:9b brd ff:ff:ff:ff:ff:ff altname enp0s3 inet 10 .0.2.15/24 metric 1024 brd 10 .0.2.255 scope global dynamic eth0 valid_lft 86241sec preferred_lft 86241sec inet6 fe80::a00:27ff:fefa:609b/64 scope link valid_lft forever preferred_lft forever Podemos ver que o IP associado a arch \u00e9 10.0.2.15 . Que \u00e9 o endere\u00e7o que colocaremos no nosso invent\u00e1rio. Agora vamos voltar a nossa m\u00e1quina main via ssh: vagrant ssh main E vamos alterar nosso arquivo /etc/ansible/hosts dessa forma e com o comando sudo nano /etc/ansible/hosts : [arch] 10.0.2.15 Dessa forma dissemos ao ansible que existe um grupo chamado arch , uma dessas m\u00e1quinas tem o ip 10.0.2.15 . Assim, podemos enviar comandos para o grupo arch . Primeiro comando remoto E podemos checar enviando um ping para a vm arch usando o seguinte comando ansible arch -m ping : ansible arch -m ping The authenticity of host '10.0.2.15 (10.0.2.15)' can 't be established. ED25519 key fingerprint is SHA256:FyOy2yTlOHSLJXVF+lmYjPywdfmQprApMWrsQ7KxUlI. This host key is known by the following other names/addresses: ~/.ssh/known_hosts:1: localhost Are you sure you want to continue connecting (yes/no/[fingerprint])? yes 10.0.2.15 | UNREACHABLE! => { \"changed\": false, \"msg\": \"Failed to connect to the host via ssh: Warning: Permanently added ' 10 .0.2.15 ' ( ED25519 ) to the list of known hosts. \\r\\n vagrant@10.0.2.15: Permission denied ( publickey,password ) . \", \" unreachable \": true } Um erro ocorreu por conta da seguran\u00e7a. O SSH da vm arch n\u00e3o permitiu que o ansible fizesse a conex\u00e3o. Para isso precisamos trocar chaves entre os hosts para que aconte\u00e7a de maneira segura. Troca de chaves SSH Vamos voltar ao shell e digitar os seguintes comandos: ssh-keygen # para gerar uma chave ssh para nossa vm `main` ssh-copy-id vagrant@10.0.2.15 # Para copiar a chave de `main` para `arch` Se executarmos o ping novamente obteremos sucesso: ansible arch -m ping 10 .0.2.15 | SUCCESS = > { \"ansible_facts\" : { \"discovered_interpreter_python\" : \"/usr/bin/python3.10\" } , \"changed\" : false, \"ping\" : \"pong\" } Isso significa que a comunica\u00e7\u00e3o com os dois n\u00f3s est\u00e1 acontecendo de maneira correta. Mas, faltou entender o que o comando ansible arch -m ping significa: ansible: Chama o ansible arch: O nome do grupo do invent\u00e1rio -m: Significa que vamos chamar um m\u00f3dulo ping: M\u00f3dulo para checar se o grupo est\u00e1 respondendo","title":"Configura\u00e7\u00e3o do ansible"},{"location":"03_configuracao_do_ansible/#configuracao-do-ansible","text":"","title":"Configura\u00e7\u00e3o do ansible"},{"location":"03_configuracao_do_ansible/#instalacao-do-ansible","text":"Agora que temos duas m\u00e1quinas virtuais criadas. Podemos come\u00e7ar a instala\u00e7\u00e3o do ansible. A primeira coisa que devemos fazer \u00e9 acessar a m\u00e1quina controladora. Para isso podemos usar o vagrant para nos ajudar: vagrant up main # Iniciar a m\u00e1quina controladora vagrant ssh main # Acessar o console da m\u00e1quina controladora via ssh E isso deve retornar o console d\u00e1 maquina controladora no usu\u00e1rio vagrant : O ansible tem seus pacotes nos reposit\u00f3rios de quase todas as distribui\u00e7\u00f5es linux. Ent\u00e3o voc\u00ea pode instalar no seu sistema como quiser. Caso tenha d\u00favidas, o link da documenta\u00e7\u00e3o Formas de instalar em diversos sistemas. sudo pacman -S ansible # Arch sudo apt install ansible # Ubuntu sudo dnf ansible # Familia Redhat O ansible tamb\u00e9m pode ser instalado via pip , por\u00e9m a instala\u00e7\u00e3o \u00e9 bastante trabalhosa. Como eu escolhi que a m\u00e1quina main fosse um archlinux, vamos seguir a configura\u00e7\u00e3o com ele. O primeiro passo que devemos fazer \u00e9 atualizar a m\u00e1quina para garantir que tudo funcione como o esperado: sudo pacman -Syu # Atualiza o sistema Caso a senha senha perguntada. A senha padr\u00e3o criada pelas m\u00e1quinas virtuais do vagrant \u00e9 vagrant . Agora podemos rodar o comando para instalar o ansible: sudo pacman -S ansible Se tudo ocorrer como o esperado, podemos perguntar a vers\u00e3o do ansible ao sistema: [ vagrant@archlinux ~ ] $ ansible --version ansible [ core 2 .14.0 ] config file = /etc/ansible/ansible.cfg configured module search path = [ '/home/vagrant/.ansible/plugins/modules' , '/usr/share/ansible/plugins/modules' ] ansible python module location = /usr/lib/python3.10/site-packages/ansible ansible collection location = /home/vagrant/.ansible/collections:/usr/share/ansible/collections executable location = /usr/bin/ansible python version = 3 .10.8 ( main, Nov 1 2022 , 14 :18:21 ) [ GCC 12 .2.0 ] ( /usr/bin/python ) jinja version = 3 .1.2 libyaml = True Ele nos disse que est\u00e1 na vers\u00e3o 3.10.8","title":"Instala\u00e7\u00e3o do ansible"},{"location":"03_configuracao_do_ansible/#instalacao-de-um-editor-de-textos","text":"Recomendo fortemente que instale um editor de textos. Para facilitar a manuten\u00e7\u00e3o do sistema. Voc\u00ea pode usar o que quiser, por\u00e9m, usarei o nano nesse tutorial. E para come\u00e7armos com p\u00e9 direito no ansible, vamos fazer essa instala\u00e7\u00e3o usando-o e j\u00e1 partirmos para o nosso primeiro comando: ansible localhost -a \"sudo pacman -S nano --noconfirm\" E iremos receber esse resultado: [ WARNING ] : No inventory was parsed, only implicit localhost is available localhost | CHANGED | rc = 0 >> resolving dependencies... looking for conflicting packages... Packages ( 1 ) nano-6.4-1 Total Installed Size: 2 .49 MiB :: Proceed with installation? [ Y/n ] checking keyring... checking package integrity... loading package files... checking for file conflicts... checking available disk space... :: Processing package changes... installing nano... :: Running post-transaction hooks... ( 1 /1 ) Arming ConditionNeedsUpdate... O que significa que conseguimos fazer uma instala\u00e7\u00e3o na m\u00e1quina local usando ansible. Isso \u00e9 de mais.","title":"Instala\u00e7\u00e3o de um editor de textos"},{"location":"03_configuracao_do_ansible/#entendendo-esse-comando","text":"Precisamos entender o b\u00e1sico do comando que executamos com ansible agora: ansible localhost -a \"sudo pacman -S nano --noconfirm\" Podemos dividi-lo em quatro partes: ansible: chama o ansible localhost: diz que a a\u00e7\u00e3o ser\u00e1 executada no localhost -a: Argumentos que passaremos para o comando \"sudo pacman -S nano --noconfirm\": Os argumentos do comando Quando s\u00f3 dizemos o nome do host localhost e colocamos os argumentos -a significa que ansible executar\u00e1 os argumentos como um comando de shell. Nesse caso \"sudo pacman -S nano --noconfirm\" \u00e9 um comando de shell que serve para instalar o nano .","title":"Entendendo esse comando"},{"location":"03_configuracao_do_ansible/#arquivo-de-inventario","text":"Por padr\u00e3o o arquivo de invent\u00e1rio das m\u00e1quinas ficam no /etc/ansible/hosts . Vamos criar esse arquivo agora. sudo nano /etc/ansible/hosts \u00c9 nesse arquivo que colocamos os endere\u00e7os dos n\u00f3s que ser\u00e3o controlados pelo ansible. O arquivo tem o seguinte formato: [<nome_do_grupo>] <endere\u00e7o_da_maquina> <op\u00e7\u00f5es> Por exemplo, vamos cadastrar nossa outra vm arch que ser\u00e1 controlado pelo main . Para isso, precisamos iniciar essa m\u00e1quina virtual. Antes disso, temos que sair do ssh em main : exit logout Agora voltamos a maquina principal. A m\u00e1quina onde as m\u00e1quinas virtuais foram instaladas. Para super o arch : vagrant up arch Com isso, agora devemos ter duas m\u00e1quinas no nosso virtual box: Com nossa vm j\u00e1 de p\u00e9, podemos enviar um comando para o vagrant nos dizer o endere\u00e7o ip da m\u00e1quina arch : vagrant ssh arch -c \"ip addr\" 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 08 :00:27:fa:60:9b brd ff:ff:ff:ff:ff:ff altname enp0s3 inet 10 .0.2.15/24 metric 1024 brd 10 .0.2.255 scope global dynamic eth0 valid_lft 86241sec preferred_lft 86241sec inet6 fe80::a00:27ff:fefa:609b/64 scope link valid_lft forever preferred_lft forever Podemos ver que o IP associado a arch \u00e9 10.0.2.15 . Que \u00e9 o endere\u00e7o que colocaremos no nosso invent\u00e1rio. Agora vamos voltar a nossa m\u00e1quina main via ssh: vagrant ssh main E vamos alterar nosso arquivo /etc/ansible/hosts dessa forma e com o comando sudo nano /etc/ansible/hosts : [arch] 10.0.2.15 Dessa forma dissemos ao ansible que existe um grupo chamado arch , uma dessas m\u00e1quinas tem o ip 10.0.2.15 . Assim, podemos enviar comandos para o grupo arch .","title":"Arquivo de invent\u00e1rio"},{"location":"03_configuracao_do_ansible/#primeiro-comando-remoto","text":"E podemos checar enviando um ping para a vm arch usando o seguinte comando ansible arch -m ping : ansible arch -m ping The authenticity of host '10.0.2.15 (10.0.2.15)' can 't be established. ED25519 key fingerprint is SHA256:FyOy2yTlOHSLJXVF+lmYjPywdfmQprApMWrsQ7KxUlI. This host key is known by the following other names/addresses: ~/.ssh/known_hosts:1: localhost Are you sure you want to continue connecting (yes/no/[fingerprint])? yes 10.0.2.15 | UNREACHABLE! => { \"changed\": false, \"msg\": \"Failed to connect to the host via ssh: Warning: Permanently added ' 10 .0.2.15 ' ( ED25519 ) to the list of known hosts. \\r\\n vagrant@10.0.2.15: Permission denied ( publickey,password ) . \", \" unreachable \": true } Um erro ocorreu por conta da seguran\u00e7a. O SSH da vm arch n\u00e3o permitiu que o ansible fizesse a conex\u00e3o. Para isso precisamos trocar chaves entre os hosts para que aconte\u00e7a de maneira segura.","title":"Primeiro comando remoto"},{"location":"03_configuracao_do_ansible/#troca-de-chaves-ssh","text":"Vamos voltar ao shell e digitar os seguintes comandos: ssh-keygen # para gerar uma chave ssh para nossa vm `main` ssh-copy-id vagrant@10.0.2.15 # Para copiar a chave de `main` para `arch` Se executarmos o ping novamente obteremos sucesso: ansible arch -m ping 10 .0.2.15 | SUCCESS = > { \"ansible_facts\" : { \"discovered_interpreter_python\" : \"/usr/bin/python3.10\" } , \"changed\" : false, \"ping\" : \"pong\" } Isso significa que a comunica\u00e7\u00e3o com os dois n\u00f3s est\u00e1 acontecendo de maneira correta. Mas, faltou entender o que o comando ansible arch -m ping significa: ansible: Chama o ansible arch: O nome do grupo do invent\u00e1rio -m: Significa que vamos chamar um m\u00f3dulo ping: M\u00f3dulo para checar se o grupo est\u00e1 respondendo","title":"Troca de chaves SSH"},{"location":"04_ansible_basico/","text":"Ansible b\u00e1sico","title":"Ansible b\u00e1sico"},{"location":"04_ansible_basico/#ansible-basico","text":"","title":"Ansible b\u00e1sico"}]}